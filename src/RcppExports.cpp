// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// quantileCpp
NumericVector quantileCpp(NumericVector x, NumericVector q);
RcppExport SEXP _rovquantR_quantileCpp(SEXP xSEXP, SEXP qSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type q(qSEXP);
    rcpp_result_gen = Rcpp::wrap(quantileCpp(x, q));
    return rcpp_result_gen;
END_RCPP
}
// fastIntMode
int fastIntMode(NumericVector x, bool narm);
RcppExport SEXP _rovquantR_fastIntMode(SEXP xSEXP, SEXP narmSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< bool >::type narm(narmSEXP);
    rcpp_result_gen = Rcpp::wrap(fastIntMode(x, narm));
    return rcpp_result_gen;
END_RCPP
}
// extractUniquePositiveValues
NumericVector extractUniquePositiveValues(NumericMatrix matrix);
RcppExport SEXP _rovquantR_extractUniquePositiveValues(SEXP matrixSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type matrix(matrixSEXP);
    rcpp_result_gen = Rcpp::wrap(extractUniquePositiveValues(matrix));
    return rcpp_result_gen;
END_RCPP
}
// createTransitionMatrix
NumericMatrix createTransitionMatrix(NumericVector values);
RcppExport SEXP _rovquantR_createTransitionMatrix(SEXP valuesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type values(valuesSEXP);
    rcpp_result_gen = Rcpp::wrap(createTransitionMatrix(values));
    return rcpp_result_gen;
END_RCPP
}
// GetDensity
List GetDensity(NumericMatrix sx, NumericMatrix sy, NumericMatrix z, NumericMatrix IDmx, NumericVector aliveStates, NumericMatrix regionID, NumericVector probs, bool display_progress, bool returnPosteriorCells);
RcppExport SEXP _rovquantR_GetDensity(SEXP sxSEXP, SEXP sySEXP, SEXP zSEXP, SEXP IDmxSEXP, SEXP aliveStatesSEXP, SEXP regionIDSEXP, SEXP probsSEXP, SEXP display_progressSEXP, SEXP returnPosteriorCellsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type sx(sxSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type sy(sySEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type z(zSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type IDmx(IDmxSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type aliveStates(aliveStatesSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type regionID(regionIDSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type probs(probsSEXP);
    Rcpp::traits::input_parameter< bool >::type display_progress(display_progressSEXP);
    Rcpp::traits::input_parameter< bool >::type returnPosteriorCells(returnPosteriorCellsSEXP);
    rcpp_result_gen = Rcpp::wrap(GetDensity(sx, sy, z, IDmx, aliveStates, regionID, probs, display_progress, returnPosteriorCells));
    return rcpp_result_gen;
END_RCPP
}
// GetSpaceUse
List GetSpaceUse(NumericMatrix sx, NumericMatrix sy, NumericMatrix z, NumericMatrix sigma, NumericMatrix habitatxy, NumericVector aliveStates, NumericMatrix regionID, NumericVector probs, bool display_progress, bool returnPosteriorCells);
RcppExport SEXP _rovquantR_GetSpaceUse(SEXP sxSEXP, SEXP sySEXP, SEXP zSEXP, SEXP sigmaSEXP, SEXP habitatxySEXP, SEXP aliveStatesSEXP, SEXP regionIDSEXP, SEXP probsSEXP, SEXP display_progressSEXP, SEXP returnPosteriorCellsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type sx(sxSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type sy(sySEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type z(zSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type habitatxy(habitatxySEXP);
    Rcpp::traits::input_parameter< NumericVector >::type aliveStates(aliveStatesSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type regionID(regionIDSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type probs(probsSEXP);
    Rcpp::traits::input_parameter< bool >::type display_progress(display_progressSEXP);
    Rcpp::traits::input_parameter< bool >::type returnPosteriorCells(returnPosteriorCellsSEXP);
    rcpp_result_gen = Rcpp::wrap(GetSpaceUse(sx, sy, z, sigma, habitatxy, aliveStates, regionID, probs, display_progress, returnPosteriorCells));
    return rcpp_result_gen;
END_RCPP
}
// GetDetectability_normal
List GetDetectability_normal(NumericMatrix p0, NumericVector sigma, NumericMatrix habitatxy, NumericMatrix detectorxy, NumericMatrix regionID, NumericVector probs, double localDist, bool display_progress, bool returnPosteriorCells);
RcppExport SEXP _rovquantR_GetDetectability_normal(SEXP p0SEXP, SEXP sigmaSEXP, SEXP habitatxySEXP, SEXP detectorxySEXP, SEXP regionIDSEXP, SEXP probsSEXP, SEXP localDistSEXP, SEXP display_progressSEXP, SEXP returnPosteriorCellsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type p0(p0SEXP);
    Rcpp::traits::input_parameter< NumericVector >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type habitatxy(habitatxySEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type detectorxy(detectorxySEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type regionID(regionIDSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type probs(probsSEXP);
    Rcpp::traits::input_parameter< double >::type localDist(localDistSEXP);
    Rcpp::traits::input_parameter< bool >::type display_progress(display_progressSEXP);
    Rcpp::traits::input_parameter< bool >::type returnPosteriorCells(returnPosteriorCellsSEXP);
    rcpp_result_gen = Rcpp::wrap(GetDetectability_normal(p0, sigma, habitatxy, detectorxy, regionID, probs, localDist, display_progress, returnPosteriorCells));
    return rcpp_result_gen;
END_RCPP
}
// GetDetectability_mean
List GetDetectability_mean(NumericVector p0, double sigma, NumericMatrix habitatxy, NumericMatrix detectorxy, bool display_progress);
RcppExport SEXP _rovquantR_GetDetectability_mean(SEXP p0SEXP, SEXP sigmaSEXP, SEXP habitatxySEXP, SEXP detectorxySEXP, SEXP display_progressSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type p0(p0SEXP);
    Rcpp::traits::input_parameter< double >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type habitatxy(habitatxySEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type detectorxy(detectorxySEXP);
    Rcpp::traits::input_parameter< bool >::type display_progress(display_progressSEXP);
    rcpp_result_gen = Rcpp::wrap(GetDetectability_mean(p0, sigma, habitatxy, detectorxy, display_progress));
    return rcpp_result_gen;
END_RCPP
}
// GetTransitions
List GetTransitions(NumericMatrix sx1, NumericMatrix sy1, NumericMatrix z1, NumericMatrix sx2, NumericMatrix sy2, NumericMatrix z2, NumericVector stateFrom, NumericVector stateTo, NumericMatrix rgmx, NumericVector probs, bool display_progress);
RcppExport SEXP _rovquantR_GetTransitions(SEXP sx1SEXP, SEXP sy1SEXP, SEXP z1SEXP, SEXP sx2SEXP, SEXP sy2SEXP, SEXP z2SEXP, SEXP stateFromSEXP, SEXP stateToSEXP, SEXP rgmxSEXP, SEXP probsSEXP, SEXP display_progressSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type sx1(sx1SEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type sy1(sy1SEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type z1(z1SEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type sx2(sx2SEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type sy2(sy2SEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type z2(z2SEXP);
    Rcpp::traits::input_parameter< NumericVector >::type stateFrom(stateFromSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type stateTo(stateToSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type rgmx(rgmxSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type probs(probsSEXP);
    Rcpp::traits::input_parameter< bool >::type display_progress(display_progressSEXP);
    rcpp_result_gen = Rcpp::wrap(GetTransitions(sx1, sy1, z1, sx2, sy2, z2, stateFrom, stateTo, rgmx, probs, display_progress));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_rovquantR_quantileCpp", (DL_FUNC) &_rovquantR_quantileCpp, 2},
    {"_rovquantR_fastIntMode", (DL_FUNC) &_rovquantR_fastIntMode, 2},
    {"_rovquantR_extractUniquePositiveValues", (DL_FUNC) &_rovquantR_extractUniquePositiveValues, 1},
    {"_rovquantR_createTransitionMatrix", (DL_FUNC) &_rovquantR_createTransitionMatrix, 1},
    {"_rovquantR_GetDensity", (DL_FUNC) &_rovquantR_GetDensity, 9},
    {"_rovquantR_GetSpaceUse", (DL_FUNC) &_rovquantR_GetSpaceUse, 10},
    {"_rovquantR_GetDetectability_normal", (DL_FUNC) &_rovquantR_GetDetectability_normal, 9},
    {"_rovquantR_GetDetectability_mean", (DL_FUNC) &_rovquantR_GetDetectability_mean, 5},
    {"_rovquantR_GetTransitions", (DL_FUNC) &_rovquantR_GetTransitions, 11},
    {NULL, NULL, 0}
};

RcppExport void R_init_rovquantR(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
